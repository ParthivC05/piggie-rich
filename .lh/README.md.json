{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753338140751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753338388503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,123 +1,30 @@\n-# Piggie Rich\n-\n-A full-stack web application for casino-style user management, deposits, and admin/cashier operations.\n-\n----\n-\n-## 🚀 Project Overview\n-Piggie Rich is a casino-inspired platform with user registration, authentication, deposit management, admin and cashier dashboards, and CMS features. It is built with a React frontend and a Node.js/Express/MongoDB backend.\n-\n----\n-\n-## ✨ Features\n-- User registration & login (JWT-based)\n-- Password reset via email\n-- Admin dashboard: user management, deposits, CMS\n-- Cashier dashboard: user lookup, deposit management\n-- Public CMS (Terms & Privacy)\n-- Protected API endpoints (role-based)\n-- Responsive UI\n-\n----\n-\n-## 🛠️ Tech Stack\n-- **Frontend:** React, React Router, Tailwind CSS\n-- **Backend:** Node.js, Express.js, MongoDB, Mongoose\n-- **Auth:** JWT\n-- **Email:** Nodemailer (Gmail)\n-- **API Testing:** Postman\n-\n----\n-\n-## ⚙️ Setup Instructions\n-\n-### 1. Clone the Repository\n-```bash\n-git clone <your-repo-url>\n-cd Piggie\\ Rich\n-```\n-\n-### 2. Backend Setup\n-```bash\n-cd backend\n-npm install\n-```\n-\n-#### Create a `.env` file in `/backend` with:\n-```\n-PORT=5000\n-MONGO_URI=mongodb://localhost:27017/piggierich\n-JWT_SECRET=your_jwt_secret\n-```\n-\n-#### Start the backend:\n-```bash\n-npm start\n-# or\n-node server.js\n-```\n-\n-### 3. Frontend Setup\n-```bash\n-cd ../\n-npm install\n-```\n-\n-#### Start the frontend:\n-```bash\n-npm run dev\n-```\n-\n----\n-\n-## 🧪 API Testing with Postman\n-- Import `backend/PiggieRich.postman_collection.json` into Postman.\n-- Set the `base_url` environment variable (e.g., `http://localhost:5000`).\n-- Use the collection to test all backend endpoints, including authentication and role-protected routes.\n-\n----\n-\n-## 🌱 Environment Variables\n-- **Backend:**\n-  - `PORT` - Port for Express server\n-  - `MONGO_URI` - MongoDB connection string\n-  - `JWT_SECRET` - Secret for JWT signing\n-- **Frontend:**\n-  - `VITE_AUTH_API_URL` - Backend API base URL (e.g., `http://localhost:5000/api`)\n-\n----\n-\n-## 📁 Folder Structure\n-```\n Piggie Rich/\n-  backend/\n-    controllers/\n-    middleware/\n-    models/\n-    routes/\n-    server.js\n-    PiggieRich.postman_collection.json\n-  src/\n-    admin/\n-    cashier/\n-    components/\n-    pages/\n-    App.jsx\n-    main.jsx\n-  public/\n-  README.md\n-```\n-\n----\n-\n-## 🤝 Contributing\n-1. Fork the repo\n-2. Create your feature branch (`git checkout -b feature/YourFeature`)\n-3. Commit your changes (`git commit -am 'Add new feature'`)\n-4. Push to the branch (`git push origin feature/YourFeature`)\n-5. Open a Pull Request\n-\n----\n-\n-## 📄 License\n-[Specify your license here]\n+├── public/                  # Static assets (images, icons, etc.)\n+│   ├── buffalo.webp\n+│   ├── cash-eruption.jpg\n+│   ├── casino-bg.png\n+│   ├── favIcon.jpg\n+│   ├── ... (other images)\n+│   ├── react.svg\n+│   ├── vite.svg\n+│   └── ... \n+├── src/                     # Main source code\n+│   ├── admin/               # Admin dashboard components & pages\n+│   │   ├── components/\n+│   │   └── pages/\n+│   ├── cashier/             # Cashier dashboard components & pages\n+│   ├── components/          # Reusable UI components (Navbar, Footer, etc.)\n+│   ├── assets/              # Frontend-specific images, SVGs, etc.\n+│   ├── pages/               # Main app pages (Login, Register, Home, etc.)\n+│   ├── App.css              # App-wide CSS\n+│   ├── App.jsx              # Root React component\n+│   ├── index.css            # Global styles\n+│   ├── main.jsx             # React entry point\n+│   └── ... (other files)\n+├── index.html               # Main HTML file\n+├── package.json             # Frontend dependencies and scripts\n+├── package-lock.json\n+├── vite.config.js           # Vite configuration\n+├── eslint.config.js         # ESLint configuration\n+├── README.md                # Project documentation\n+└── ... (other config files)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753338419290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,5 +26,33 @@\n ├── package-lock.json\n ├── vite.config.js           # Vite configuration\n ├── eslint.config.js         # ESLint configuration\n ├── README.md                # Project documentation\n-└── ... (other config files)\n\\ No newline at end of file\n+└── ... (other config files)\n+\n+\n+backend/\n+├── controllers/             # Business logic for each route\n+│   ├── adminController.js\n+│   ├── authController.js\n+│   ├── depositController.js\n+│   └── userController.js\n+├── middleware/              # Authentication & authorization middleware\n+│   ├── adminAuth.js\n+│   └── auth.js\n+├── models/                  # Mongoose models (MongoDB schemas)\n+│   ├── CMS.js\n+│   ├── Deposit.js\n+│   ├── Transaction.js\n+│   └── User.js\n+├── routes/                  # API endpoint definitions\n+│   ├── adminRoutes.js\n+│   ├── authRoutes.js\n+│   ├── CashierRoutes.js\n+│   ├── depositRoutes.js\n+│   ├── PublicRoutes.js\n+│   └── userRoutes.js\n+├── server.js                # Express app and server entry point\n+├── package.json             # Backend dependencies and scripts\n+├── package-lock.json\n+├── vercel.json              # Vercel deployment config\n+└── PiggieRich.postman_collection.json # Postman API collection\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753338453428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,6 +53,5 @@\n │   └── userRoutes.js\n ├── server.js                # Express app and server entry point\n ├── package.json             # Backend dependencies and scripts\n ├── package-lock.json\n-├── vercel.json              # Vercel deployment config\n-└── PiggieRich.postman_collection.json # Postman API collection\n\\ No newline at end of file\n+├── vercel.json              # Vercel deployment config\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753338140751,
            "name": "Commit-0",
            "content": "# Piggie Rich\n\nA full-stack web application for casino-style user management, deposits, and admin/cashier operations.\n\n---\n\n## 🚀 Project Overview\nPiggie Rich is a casino-inspired platform with user registration, authentication, deposit management, admin and cashier dashboards, and CMS features. It is built with a React frontend and a Node.js/Express/MongoDB backend.\n\n---\n\n## ✨ Features\n- User registration & login (JWT-based)\n- Password reset via email\n- Admin dashboard: user management, deposits, CMS\n- Cashier dashboard: user lookup, deposit management\n- Public CMS (Terms & Privacy)\n- Protected API endpoints (role-based)\n- Responsive UI\n\n---\n\n## 🛠️ Tech Stack\n- **Frontend:** React, React Router, Tailwind CSS\n- **Backend:** Node.js, Express.js, MongoDB, Mongoose\n- **Auth:** JWT\n- **Email:** Nodemailer (Gmail)\n- **API Testing:** Postman\n\n---\n\n## ⚙️ Setup Instructions\n\n### 1. Clone the Repository\n```bash\ngit clone <your-repo-url>\ncd Piggie\\ Rich\n```\n\n### 2. Backend Setup\n```bash\ncd backend\nnpm install\n```\n\n#### Create a `.env` file in `/backend` with:\n```\nPORT=5000\nMONGO_URI=mongodb://localhost:27017/piggierich\nJWT_SECRET=your_jwt_secret\n```\n\n#### Start the backend:\n```bash\nnpm start\n# or\nnode server.js\n```\n\n### 3. Frontend Setup\n```bash\ncd ../\nnpm install\n```\n\n#### Start the frontend:\n```bash\nnpm run dev\n```\n\n---\n\n## 🧪 API Testing with Postman\n- Import `backend/PiggieRich.postman_collection.json` into Postman.\n- Set the `base_url` environment variable (e.g., `http://localhost:5000`).\n- Use the collection to test all backend endpoints, including authentication and role-protected routes.\n\n---\n\n## 🌱 Environment Variables\n- **Backend:**\n  - `PORT` - Port for Express server\n  - `MONGO_URI` - MongoDB connection string\n  - `JWT_SECRET` - Secret for JWT signing\n- **Frontend:**\n  - `VITE_AUTH_API_URL` - Backend API base URL (e.g., `http://localhost:5000/api`)\n\n---\n\n## 📁 Folder Structure\n```\nPiggie Rich/\n  backend/\n    controllers/\n    middleware/\n    models/\n    routes/\n    server.js\n    PiggieRich.postman_collection.json\n  src/\n    admin/\n    cashier/\n    components/\n    pages/\n    App.jsx\n    main.jsx\n  public/\n  README.md\n```\n\n---\n\n## 🤝 Contributing\n1. Fork the repo\n2. Create your feature branch (`git checkout -b feature/YourFeature`)\n3. Commit your changes (`git commit -am 'Add new feature'`)\n4. Push to the branch (`git push origin feature/YourFeature`)\n5. Open a Pull Request\n\n---\n\n## 📄 License\n[Specify your license here]\n"
        }
    ]
}