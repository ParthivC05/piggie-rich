{
    "sourceFile": "src/services/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753698380745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753698380745,
            "name": "Commit-0",
            "content": "// API Service for Piggie Rich\r\nconst API_BASE_URL = import.meta.env.VITE_AUTH_API_URL || 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  // Helper method to get auth headers\r\n  getAuthHeaders() {\r\n    const token = localStorage.getItem('token');\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` })\r\n    };\r\n  }\r\n\r\n  // Helper method to handle API responses\r\n  async handleResponse(response) {\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  // Auth APIs\r\n  async login(credentials) {\r\n    const response = await fetch(`${this.baseURL}/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(credentials)\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async register(userData) {\r\n    const response = await fetch(`${this.baseURL}/register`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData)\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async forgotPassword(email) {\r\n    const response = await fetch(`${this.baseURL}/forgot-password`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email })\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async resetPassword(token, password) {\r\n    const response = await fetch(`${this.baseURL}/reset-password/${token}`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ password })\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // User APIs\r\n  async getProfile() {\r\n    const response = await fetch(`${this.baseURL}/profile`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserById(id) {\r\n    const response = await fetch(`${this.baseURL}/test-user/${id}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Deposit APIs\r\n  async createDeposit(depositData) {\r\n    const response = await fetch(`${this.baseURL}/deposit`, {\r\n      method: 'POST',\r\n      headers: this.getAuthHeaders(),\r\n      body: JSON.stringify(depositData)\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Admin APIs\r\n  async getAdminStats() {\r\n    const response = await fetch(`${this.baseURL}/admin/stats`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getAllUsers() {\r\n    const response = await fetch(`${this.baseURL}/admin/users`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getUserByIdAdmin(id) {\r\n    const response = await fetch(`${this.baseURL}/admin/users/${id}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async editUser(id, userData) {\r\n    const response = await fetch(`${this.baseURL}/admin/users/${id}`, {\r\n      method: 'PUT',\r\n      headers: this.getAuthHeaders(),\r\n      body: JSON.stringify(userData)\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async blockUser(id, blocked) {\r\n    const response = await fetch(`${this.baseURL}/admin/users/${id}/block`, {\r\n      method: 'PATCH',\r\n      headers: this.getAuthHeaders(),\r\n      body: JSON.stringify({ blocked })\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async deleteUser(id) {\r\n    const response = await fetch(`${this.baseURL}/admin/users/${id}`, {\r\n      method: 'DELETE',\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getDeposits(filters = {}) {\r\n    const params = new URLSearchParams(filters);\r\n    const response = await fetch(`${this.baseURL}/admin/deposits?${params}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getCMS() {\r\n    const response = await fetch(`${this.baseURL}/admin/cms`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async updateCMS(cmsData) {\r\n    const response = await fetch(`${this.baseURL}/admin/cms`, {\r\n      method: 'PUT',\r\n      headers: this.getAuthHeaders(),\r\n      body: JSON.stringify(cmsData)\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async addUser(userData) {\r\n    const response = await fetch(`${this.baseURL}/admin/add-user`, {\r\n      method: 'POST',\r\n      headers: this.getAuthHeaders(),\r\n      body: JSON.stringify(userData)\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Cashier APIs\r\n  async getCashierUsers() {\r\n    const response = await fetch(`${this.baseURL}/cashier/users`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getCashierUserById(id) {\r\n    const response = await fetch(`${this.baseURL}/cashier/users/${id}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  async getCashierDeposits(filters = {}) {\r\n    const params = new URLSearchParams(filters);\r\n    const response = await fetch(`${this.baseURL}/cashier/deposits?${params}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n    return this.handleResponse(response);\r\n  }\r\n\r\n  // Public APIs\r\n  async getPublicCMS() {\r\n    const response = await fetch(`${this.baseURL}/cms`);\r\n    return this.handleResponse(response);\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst apiService = new ApiService();\r\nexport default apiService; "
        }
    ]
}