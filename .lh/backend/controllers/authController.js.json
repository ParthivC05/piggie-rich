{
    "sourceFile": "backend/controllers/authController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1751452107161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751517069103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,61 +1,1 @@\n-const User = require('../models/User');\r\n-const bcrypt = require('bcryptjs');\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-exports.register = async (req, res) => {\r\n-  try {\r\n-    const { username, password, dob, firstName, lastName, email, phone, role } = req.body;\r\n-    if (!username || !password || !dob || !firstName || !lastName || !email || !phone) {\r\n-      return res.status(400).json({ error: 'All fields are required.' });\r\n-    }\r\n-    const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n-    if (existingUser) {\r\n-      return res.status(400).json({ error: 'Username or email already exists.' });\r\n-    }\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    const user = new User({\r\n-      username,\r\n-      password: hashedPassword,\r\n-      dob,\r\n-      firstName,\r\n-      lastName,\r\n-      email,\r\n-      phone,\r\n-      role: role || 'user',\r\n-    });\r\n-    await user.save();\r\n-    res.status(201).json({ message: 'User registered successfully.' });\r\n-  } catch (err) {\r\n-    res.status(400).json({ error: err.message });\r\n-  }\r\n-};\r\n-\r\n-exports.login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-    if (!username || !password)\r\n-      return res.status(400).json({ error: 'Username and password required.' });\r\n-\r\n-    const user = await User.findOne({ username });\r\n-    if (!user) return res.status(400).json({ error: 'Invalid credentials' });\r\n-\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n-\r\n-    const token = jwt.sign(\r\n-      { userId: user._id, role: user.role },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '1h' }\r\n-    );\r\n-    res.json({\r\n-      token,\r\n-      user: {\r\n-        username: user.username,\r\n-        email: user.email,\r\n-        role: user.role,\r\n-      },\r\n-    });\r\n-  } catch (err) {\r\n-    res.status(500).json({ error: 'Server error' });\r\n-  }\r\n-};\n\\ No newline at end of file\n+Also blocked user should not able to login\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751517074950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,66 @@\n-Also blocked user should not able to login\n\\ No newline at end of file\n+const User = require('../models/User');\r\n+const bcrypt = require('bcryptjs');\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+exports.register = async (req, res) => {\r\n+  try {\r\n+    const { username, password, dob, firstName, lastName, email, phone, role } = req.body;\r\n+    if (!username || !password || !dob || !firstName || !lastName || !email || !phone) {\r\n+      return res.status(400).json({ error: 'All fields are required.' });\r\n+    }\r\n+    const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n+    if (existingUser) {\r\n+      return res.status(400).json({ error: 'Username or email already exists.' });\r\n+    }\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    const user = new User({\r\n+      username,\r\n+      password: hashedPassword,\r\n+      dob,\r\n+      firstName,\r\n+      lastName,\r\n+      email,\r\n+      phone,\r\n+      role: role || 'user',\r\n+    });\r\n+    await user.save();\r\n+    res.status(201).json({ message: 'User registered successfully.' });\r\n+  } catch (err) {\r\n+    res.status(400).json({ error: err.message });\r\n+  }\r\n+};\r\n+\r\n+exports.login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+    if (!username || !password)\r\n+      return res.status(400).json({ error: 'Username and password required.' });\r\n+\r\n+    const user = await User.findOne({ username });\r\n+    if (!user) return res.status(400).json({ error: 'Invalid credentials' });\r\n+\r\n+    // Blocked user check\r\n+    if (user.blocked) {\r\n+      return res.status(403).json({ error: 'Your account is blocked. Please contact support.' });\r\n+    }\r\n+\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n+\r\n+    const token = jwt.sign(\r\n+      { userId: user._id, role: user.role },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '1h' }\r\n+    );\r\n+    res.json({\r\n+      token,\r\n+      user: {\r\n+        username: user.username,\r\n+        email: user.email,\r\n+        role: user.role,\r\n+      },\r\n+    });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: 'Server error' });\r\n+  }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753783218586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n const User = require('../models/User');\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n+const crypto = require(\"crypto\");\r\n+const nodemailer = require(\"nodemailer\");\r\n \r\n exports.register = async (req, res) => {\r\n   try {\r\n     const { username, password, dob, firstName, lastName, email, phone, role } = req.body;\r\n@@ -62,5 +64,66 @@\n     });\r\n   } catch (err) {\r\n     res.status(500).json({ error: 'Server error' });\r\n   }\r\n-};\n\\ No newline at end of file\n+};\r\n+\r\n+exports.forgotPassword = async (req, res) => {\r\n+  try {\r\n+    const { email } = req.body;\r\n+\r\n+    const user = await User.findOne({ email });\r\n+    if (!user) {\r\n+      return res.status(404).json({ message: \"User not found\" });\r\n+    }\r\n+\r\n+    // Generate reset token\r\n+    const token = crypto.randomBytes(32).toString(\"hex\");\r\n+    user.resetToken = token;\r\n+    user.resetTokenExpire = Date.now() + 3600000; // 1 hour\r\n+    await user.save();\r\n+\r\n+    // For now, we'll return the token directly for testing\r\n+    // In production, you would send this via email\r\n+    const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:5173'}/reset-password/${token}`;\r\n+    \r\n+    res.status(200).json({ \r\n+      message: \"Reset link generated successfully\",\r\n+      resetUrl: resetUrl,\r\n+      token: token // Remove this in production\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Password reset failed:\", error);\r\n+    res.status(500).json({ message: \"Failed to process password reset\" });\r\n+  }\r\n+};\r\n+\r\n+exports.resetPassword = async (req, res) => {\r\n+  try {\r\n+    const { token } = req.params;\r\n+    const { password } = req.body;\r\n+\r\n+    const user = await User.findOne({ \r\n+      resetToken: token, \r\n+      resetTokenExpire: { $gt: Date.now() } \r\n+    });\r\n+    \r\n+    if (!user) {\r\n+      return res.status(400).json({ message: \"Token invalid or expired\" });\r\n+    }\r\n+\r\n+    // Hash the new password\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    \r\n+    // Update user password and clear reset token\r\n+    user.password = hashedPassword;\r\n+    user.resetToken = undefined;\r\n+    user.resetTokenExpire = undefined;\r\n+    await user.save();\r\n+\r\n+    res.status(200).json({ message: \"Password updated successfully\" });\r\n+  } catch (error) {\r\n+    console.error(\"Password reset failed:\", error);\r\n+    res.status(500).json({ message: \"Failed to reset password\" });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1753783426385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     await user.save();\r\n \r\n     // For now, we'll return the token directly for testing\r\n     // In production, you would send this via email\r\n-    const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:5173'}/reset-password/${token}`;\r\n+    const resetUrl = `${00 || 'http://localhost:5173'}/reset-password/${token}`;\r\n     \r\n     res.status(200).json({ \r\n       message: \"Reset link generated successfully\",\r\n       resetUrl: resetUrl,\r\n"
                },
                {
                    "date": 1753783432776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     await user.save();\r\n \r\n     // For now, we'll return the token directly for testing\r\n     // In production, you would send this via email\r\n-    const resetUrl = `${00 || 'http://localhost:5173'}/reset-password/${token}`;\r\n+    const resetUrl = `http://localhost:5173/reset-password/${token}`;\r\n     \r\n     res.status(200).json({ \r\n       message: \"Reset link generated successfully\",\r\n       resetUrl: resetUrl,\r\n"
                },
                {
                    "date": 1753783978863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     await user.save();\r\n \r\n     // For now, we'll return the token directly for testing\r\n     // In production, you would send this via email\r\n-    const resetUrl = `http://localhost:5173/reset-password/${token}`;\r\n+    const resetUrl = `${process.env.FRONTEND_URL || 'https://piggie-rich.vercel.app'}/reset-password/${token}`;\r\n     \r\n     res.status(200).json({ \r\n       message: \"Reset link generated successfully\",\r\n       resetUrl: resetUrl,\r\n"
                },
                {
                    "date": 1753784005985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     await user.save();\r\n \r\n     // For now, we'll return the token directly for testing\r\n     // In production, you would send this via email\r\n-    const resetUrl = `${process.env.FRONTEND_URL || 'https://piggie-rich.vercel.app'}/reset-password/${token}`;\r\n+    const resetUrl = `${'process.env.FRONTEND_URL' || 'https://piggie-rich.vercel.app'}/reset-password/${token}`;\r\n     \r\n     res.status(200).json({ \r\n       message: \"Reset link generated successfully\",\r\n       resetUrl: resetUrl,\r\n"
                },
                {
                    "date": 1753784011502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     await user.save();\r\n \r\n     // For now, we'll return the token directly for testing\r\n     // In production, you would send this via email\r\n-    const resetUrl = `${'process.env.FRONTEND_URL' || 'https://piggie-rich.vercel.app'}/reset-password/${token}`;\r\n+    const resetUrl = `${'' || 'https://piggie-rich.vercel.app'}/reset-password/${token}`;\r\n     \r\n     res.status(200).json({ \r\n       message: \"Reset link generated successfully\",\r\n       resetUrl: resetUrl,\r\n"
                },
                {
                    "date": 1753784024707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     await user.save();\r\n \r\n     // For now, we'll return the token directly for testing\r\n     // In production, you would send this via email\r\n-    const resetUrl = `${'' || 'https://piggie-rich.vercel.app'}/reset-password/${token}`;\r\n+    const resetUrl = `${'https://www.waiwaisweeps.com/' || 'https://piggie-rich.vercel.app'}/reset-password/${token}`;\r\n     \r\n     res.status(200).json({ \r\n       message: \"Reset link generated successfully\",\r\n       resetUrl: resetUrl,\r\n"
                },
                {
                    "date": 1753784032700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     await user.save();\r\n \r\n     // For now, we'll return the token directly for testing\r\n     // In production, you would send this via email\r\n-    const resetUrl = `${'https://www.waiwaisweeps.com/' || 'https://piggie-rich.vercel.app'}/reset-password/${token}`;\r\n+    const resetUrl = `${'https://www.waiwaisweeps.com/' || 'http://localhost:5173'}/reset-password/${token}`;\r\n     \r\n     res.status(200).json({ \r\n       message: \"Reset link generated successfully\",\r\n       resetUrl: resetUrl,\r\n"
                },
                {
                    "date": 1753784049969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n     user.resetToken = token;\r\n     user.resetTokenExpire = Date.now() + 3600000; // 1 hour\r\n     await user.save();\r\n \r\n-    // For now, we'll return the token directly for testing\r\n+    // For now, we'll return the token directly for testin\r\n     // In production, you would send this via email\r\n     const resetUrl = `${'https://www.waiwaisweeps.com/' || 'http://localhost:5173'}/reset-password/${token}`;\r\n     \r\n     res.status(200).json({ \r\n"
                },
                {
                    "date": 1753784055201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,16 +81,14 @@\n     user.resetToken = token;\r\n     user.resetTokenExpire = Date.now() + 3600000; // 1 hour\r\n     await user.save();\r\n \r\n-    // For now, we'll return the token directly for testin\r\n-    // In production, you would send this via email\r\n     const resetUrl = `${'https://www.waiwaisweeps.com/' || 'http://localhost:5173'}/reset-password/${token}`;\r\n     \r\n     res.status(200).json({ \r\n       message: \"Reset link generated successfully\",\r\n       resetUrl: resetUrl,\r\n-      token: token // Remove this in production\r\n+      token: token\r\n     });\r\n \r\n   } catch (error) {\r\n     console.error(\"Password reset failed:\", error);\r\n"
                },
                {
                    "date": 1753784065157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,12 +109,10 @@\n     if (!user) {\r\n       return res.status(400).json({ message: \"Token invalid or expired\" });\r\n     }\r\n \r\n-    // Hash the new password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     \r\n-    // Update user password and clear reset token\r\n     user.password = hashedPassword;\r\n     user.resetToken = undefined;\r\n     user.resetTokenExpire = undefined;\r\n     await user.save();\r\n"
                },
                {
                    "date": 1753784074535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,8 @@\n \r\n     const user = await User.findOne({ username });\r\n     if (!user) return res.status(400).json({ error: 'Invalid credentials' });\r\n \r\n-    // Blocked user check\r\n     if (user.blocked) {\r\n       return res.status(403).json({ error: 'Your account is blocked. Please contact support.' });\r\n     }\r\n \r\n@@ -75,12 +74,11 @@\n     if (!user) {\r\n       return res.status(404).json({ message: \"User not found\" });\r\n     }\r\n \r\n-    // Generate reset token\r\n     const token = crypto.randomBytes(32).toString(\"hex\");\r\n     user.resetToken = token;\r\n-    user.resetTokenExpire = Date.now() + 3600000; // 1 hour\r\n+    user.resetTokenExpire = Date.now() + 3600000;\r\n     await user.save();\r\n \r\n     const resetUrl = `${'https://www.waiwaisweeps.com/' || 'http://localhost:5173'}/reset-password/${token}`;\r\n     \r\n"
                }
            ],
            "date": 1751452107161,
            "name": "Commit-0",
            "content": "const User = require('../models/User');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nexports.register = async (req, res) => {\r\n  try {\r\n    const { username, password, dob, firstName, lastName, email, phone, role } = req.body;\r\n    if (!username || !password || !dob || !firstName || !lastName || !email || !phone) {\r\n      return res.status(400).json({ error: 'All fields are required.' });\r\n    }\r\n    const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n    if (existingUser) {\r\n      return res.status(400).json({ error: 'Username or email already exists.' });\r\n    }\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const user = new User({\r\n      username,\r\n      password: hashedPassword,\r\n      dob,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      role: role || 'user',\r\n    });\r\n    await user.save();\r\n    res.status(201).json({ message: 'User registered successfully.' });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  try {\r\n    const { username, password } = req.body;\r\n    if (!username || !password)\r\n      return res.status(400).json({ error: 'Username and password required.' });\r\n\r\n    const user = await User.findOne({ username });\r\n    if (!user) return res.status(400).json({ error: 'Invalid credentials' });\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n\r\n    const token = jwt.sign(\r\n      { userId: user._id, role: user.role },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '1h' }\r\n    );\r\n    res.json({\r\n      token,\r\n      user: {\r\n        username: user.username,\r\n        email: user.email,\r\n        role: user.role,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n};"
        }
    ]
}