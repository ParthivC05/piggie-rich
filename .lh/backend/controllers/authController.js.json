{
    "sourceFile": "backend/controllers/authController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751452107161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751452107161,
            "name": "Commit-0",
            "content": "const User = require('../models/User');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nexports.register = async (req, res) => {\r\n  try {\r\n    const { username, password, dob, firstName, lastName, email, phone, role } = req.body;\r\n    if (!username || !password || !dob || !firstName || !lastName || !email || !phone) {\r\n      return res.status(400).json({ error: 'All fields are required.' });\r\n    }\r\n    const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n    if (existingUser) {\r\n      return res.status(400).json({ error: 'Username or email already exists.' });\r\n    }\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const user = new User({\r\n      username,\r\n      password: hashedPassword,\r\n      dob,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n      role: role || 'user',\r\n    });\r\n    await user.save();\r\n    res.status(201).json({ message: 'User registered successfully.' });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  try {\r\n    const { username, password } = req.body;\r\n    if (!username || !password)\r\n      return res.status(400).json({ error: 'Username and password required.' });\r\n\r\n    const user = await User.findOne({ username });\r\n    if (!user) return res.status(400).json({ error: 'Invalid credentials' });\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n\r\n    const token = jwt.sign(\r\n      { userId: user._id, role: user.role },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '1h' }\r\n    );\r\n    res.json({\r\n      token,\r\n      user: {\r\n        username: user.username,\r\n        email: user.email,\r\n        role: user.role,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n};"
        }
    ]
}