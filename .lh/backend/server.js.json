{
    "sourceFile": "backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1751362656160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751363164079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n app.use(cors());\r\n app.use(express.json());\r\n \r\n // MongoDB connection\r\n-mongoose.connect('mongodb://localhost:27017/piggierich', {\r\n+mongoose.connect('mongodb+srv://parthivC123:<db_password>@clusterpiggie.dlhq0bg.mongodb.net/', {\r\n   useNewUrlParser: true,\r\n   useUnifiedTopology: true,\r\n });\r\n \r\n"
                },
                {
                    "date": 1751363169924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n app.use(cors());\r\n app.use(express.json());\r\n \r\n // MongoDB connection\r\n-mongoose.connect('mongodb+srv://parthivC123:<db_password>@clusterpiggie.dlhq0bg.mongodb.net/', {\r\n+mongoose.connect('mongodb+srv://parthivC123:parthivC@123@clusterpiggie.dlhq0bg.mongodb.net/', {\r\n   useNewUrlParser: true,\r\n   useUnifiedTopology: true,\r\n });\r\n \r\n"
                },
                {
                    "date": 1751363253057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n app.use(cors());\r\n app.use(express.json());\r\n \r\n // MongoDB connection\r\n-mongoose.connect('mongodb+srv://parthivC123:parthivC@123@clusterpiggie.dlhq0bg.mongodb.net/', {\r\n+mongoose.connect('mongodb+srv://parthivC123:parthivC%40123@clusterpiggie.dlhq0bg.mongodb.net/', {\r\n   useNewUrlParser: true,\r\n   useUnifiedTopology: true,\r\n });\r\n \r\n"
                },
                {
                    "date": 1751363703007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n app.use(cors());\r\n app.use(express.json());\r\n \r\n // MongoDB connection\r\n-mongoose.connect('mongodb+srv://parthivC123:parthivC%40123@clusterpiggie.dlhq0bg.mongodb.net/', {\r\n+mongoose.connect('mongodb+srv://parthivC123:<db_password>@clusterpiggie.dlhq0bg.mongodb.net/?retryWrites=true&w=majority&appName=ClusterPiggie', {\r\n   useNewUrlParser: true,\r\n   useUnifiedTopology: true,\r\n });\r\n \r\n"
                },
                {
                    "date": 1751363711491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n app.use(cors());\r\n app.use(express.json());\r\n \r\n // MongoDB connection\r\n-mongoose.connect('mongodb+srv://parthivC123:<db_password>@clusterpiggie.dlhq0bg.mongodb.net/?retryWrites=true&w=majority&appName=ClusterPiggie', {\r\n+mongoose.connect('mongodb+srv://parthivC123:parthivC%40123@clusterpiggie.dlhq0bg.mongodb.net/?retryWrites=true&w=majority&appName=ClusterPiggie', {\r\n   useNewUrlParser: true,\r\n   useUnifiedTopology: true,\r\n });\r\n \r\n"
                },
                {
                    "date": 1751364008050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+require('dotenv').config();\r\n const express = require('express');\r\n const mongoose = require('mongoose');\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n@@ -8,12 +9,9 @@\n app.use(cors());\r\n app.use(express.json());\r\n \r\n // MongoDB connection\r\n-mongoose.connect('mongodb+srv://parthivC123:parthivC%40123@clusterpiggie.dlhq0bg.mongodb.net/?retryWrites=true&w=majority&appName=ClusterPiggie', {\r\n-  useNewUrlParser: true,\r\n-  useUnifiedTopology: true,\r\n-});\r\n+mongoose.connect(process.env.MONGO_URI);\r\n \r\n // User schema\r\n const userSchema = new mongoose.Schema({\r\n   username: { type: String, unique: true },\r\n@@ -68,9 +66,9 @@\n     const isMatch = await bcrypt.compare(password, user.password);\r\n     if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n \r\n     // Generate JWT token\r\n-    const token = jwt.sign({ userId: user._id }, 'your_jwt_secret', { expiresIn: '1d' });\r\n+    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\r\n     res.json({ token, user: { username: user.username, email: user.email } });\r\n   } catch (err) {\r\n     res.status(500).json({ error: 'Server error' });\r\n   }\r\n"
                },
                {
                    "date": 1751364432590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n     const isMatch = await bcrypt.compare(password, user.password);\r\n     if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n \r\n     // Generate JWT token\r\n-    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });\r\n+    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n     res.json({ token, user: { username: user.username, email: user.email } });\r\n   } catch (err) {\r\n     res.status(500).json({ error: 'Server error' });\r\n   }\r\n"
                },
                {
                    "date": 1751365231239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,78 +1,1 @@\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const mongoose = require('mongoose');\r\n-const bcrypt = require('bcryptjs');\r\n-const jwt = require('jsonwebtoken');\r\n-const cors = require('cors');\r\n-\r\n-const app = express();\r\n-app.use(cors());\r\n-app.use(express.json());\r\n-\r\n-// MongoDB connection\r\n-mongoose.connect(process.env.MONGO_URI);\r\n-\r\n-// User schema\r\n-const userSchema = new mongoose.Schema({\r\n-  username: { type: String, unique: true },\r\n-  password: String,\r\n-  dob: String,\r\n-  firstName: String,\r\n-  lastName: String,\r\n-  email: { type: String, unique: true },\r\n-  phone: String,\r\n-});\r\n-\r\n-const User = mongoose.model('User', userSchema);\r\n-\r\n-// Register route\r\n-app.post('/api/register', async (req, res) => {\r\n-  try {\r\n-    const { username, password, dob, firstName, lastName, email, phone } = req.body;\r\n-    if (!username || !password || !dob || !firstName || !lastName || !email || !phone) {\r\n-      return res.status(400).json({ error: 'All fields are required.' });\r\n-    }\r\n-    const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n-    if (existingUser) {\r\n-      return res.status(400).json({ error: 'Username or email already exists.' });\r\n-    }\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    const user = new User({\r\n-      username,\r\n-      password: hashedPassword,\r\n-      dob,\r\n-      firstName,\r\n-      lastName,\r\n-      email,\r\n-      phone,\r\n-    });\r\n-    await user.save();\r\n-    res.status(201).json({ message: 'User registered successfully.' });\r\n-  } catch (err) {\r\n-    res.status(400).json({ error: err.message });\r\n-  }\r\n-});\r\n-\r\n-// Login route\r\n-app.post('/api/login', async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-    if (!username || !password)\r\n-      return res.status(400).json({ error: 'Username and password required.' });\r\n-\r\n-    const user = await User.findOne({ username });\r\n-    if (!user) return res.status(400).json({ error: 'Invalid credentials' });\r\n-\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n-\r\n-    // Generate JWT token\r\n-    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n-    res.json({ token, user: { username: user.username, email: user.email } });\r\n-  } catch (err) {\r\n-    res.status(500).json({ error: 'Server error' });\r\n-  }\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n\\ No newline at end of file\n+localStorage.setItem(\"token\", data.token);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751365236741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,78 @@\n-localStorage.setItem(\"token\", data.token);\n\\ No newline at end of file\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const mongoose = require('mongoose');\r\n+const bcrypt = require('bcryptjs');\r\n+const jwt = require('jsonwebtoken');\r\n+const cors = require('cors');\r\n+\r\n+const app = express();\r\n+app.use(cors());\r\n+app.use(express.json());\r\n+\r\n+// MongoDB connection\r\n+mongoose.connect(process.env.MONGO_URI);\r\n+\r\n+// User schema\r\n+const userSchema = new mongoose.Schema({\r\n+  username: { type: String, unique: true },\r\n+  password: String,\r\n+  dob: String,\r\n+  firstName: String,\r\n+  lastName: String,\r\n+  email: { type: String, unique: true },\r\n+  phone: String,\r\n+});\r\n+\r\n+const User = mongoose.model('User', userSchema);\r\n+\r\n+// Register route\r\n+app.post('/api/register', async (req, res) => {\r\n+  try {\r\n+    const { username, password, dob, firstName, lastName, email, phone } = req.body;\r\n+    if (!username || !password || !dob || !firstName || !lastName || !email || !phone) {\r\n+      return res.status(400).json({ error: 'All fields are required.' });\r\n+    }\r\n+    const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n+    if (existingUser) {\r\n+      return res.status(400).json({ error: 'Username or email already exists.' });\r\n+    }\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    const user = new User({\r\n+      username,\r\n+      password: hashedPassword,\r\n+      dob,\r\n+      firstName,\r\n+      lastName,\r\n+      email,\r\n+      phone,\r\n+    });\r\n+    await user.save();\r\n+    res.status(201).json({ message: 'User registered successfully.' });\r\n+  } catch (err) {\r\n+    res.status(400).json({ error: err.message });\r\n+  }\r\n+});\r\n+\r\n+// Login route\r\n+app.post('/api/login', async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+    if (!username || !password)\r\n+      return res.status(400).json({ error: 'Username and password required.' });\r\n+\r\n+    const user = await User.findOne({ username });\r\n+    if (!user) return res.status(400).json({ error: 'Invalid credentials' });\r\n+\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n+\r\n+    // Generate JWT token\r\n+    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n+    res.json({ token, user: { username: user.username, email: user.email } });\r\n+  } catch (err) {\r\n+    res.status(500).json({ error: 'Server error' });\r\n+  }\r\n+});\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751365577476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,6 +73,27 @@\n     res.status(500).json({ error: 'Server error' });\r\n   }\r\n });\r\n \r\n+// JWT authentication middleware\r\n+const auth = (req, res, next) => {\r\n\\ No newline at end of file\n+  const authHeader = req.headers.authorization;\r\n+  if (!authHeader) return res.status(401).json({ error: \"No token provided\" });\r\n+  const token = authHeader.split(\" \")[1];\r\n+  try {\r\n+    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+    req.userId = decoded.userId;\r\n+    next();\r\n+  } catch {\r\n+    return res.status(401).json({ error: \"Invalid token\" });\r\n+  }\r\n+};\r\n+\r\n+// Profile route (protected)\r\n+app.get('/api/profile', auth, async (req, res) => {\r\n+  const user = await User.findById(req.userId).select('-password');\r\n+  if (!user) return res.status(404).json({ error: \"User not found\" });\r\n+  res.json({ user });\r\n+});\r\n+\r\n const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n+app.listen(PORT, () => console.log(`Server running on\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751365585665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,27 +73,6 @@\n     res.status(500).json({ error: 'Server error' });\r\n   }\r\n });\r\n \r\n-// JWT authentication middleware\r\n-const auth = (req, res, next) => {\r\n-  const authHeader = req.headers.authorization;\r\n-  if (!authHeader) return res.status(401).json({ error: \"No token provided\" });\r\n-  const token = authHeader.split(\" \")[1];\r\n-  try {\r\n-    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-    req.userId = decoded.userId;\r\n-    next();\r\n-  } catch {\r\n-    return res.status(401).json({ error: \"Invalid token\" });\r\n-  }\r\n-};\r\n-\r\n-// Profile route (protected)\r\n-app.get('/api/profile', auth, async (req, res) => {\r\n-  const user = await User.findById(req.userId).select('-password');\r\n-  if (!user) return res.status(404).json({ error: \"User not found\" });\r\n-  res.json({ user });\r\n-});\r\n-\r\n const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => console.log(`Server running on\n\\ No newline at end of file\n+app.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751365628632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,6 +73,27 @@\n     res.status(500).json({ error: 'Server error' });\r\n   }\r\n });\r\n \r\n+// JWT authentication middleware\r\n+const auth = (req, res, next) => {\r\n+  const authHeader = req.headers.authorization;\r\n+  if (!authHeader) return res.status(401).json({ error: \"No token provided\" });\r\n+  const token = authHeader.split(\" \")[1];\r\n+  try {\r\n+    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+    req.userId = decoded.userId;\r\n+    next();\r\n+  } catch {\r\n+    return res.status(401).json({ error: \"Invalid token\" });\r\n+  }\r\n+};\r\n+\r\n+// Profile route (protected)\r\n+app.get('/api/profile', auth, async (req, res) => {\r\n+  const user = await User.findById(req.userId).select('-password');\r\n+  if (!user) return res.status(404).json({ error: \"User not found\" });\r\n+  res.json({ user });\r\n+});\r\n+\r\n const PORT = process.env.PORT || 5000;\r\n app.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751365804634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,10 +89,14 @@\n };\r\n \r\n // Profile route (protected)\r\n app.get('/api/profile', auth, async (req, res) => {\r\n+  console.log(\"Looking up user ID:\", req.userId);\r\n   const user = await User.findById(req.userId).select('-password');\r\n-  if (!user) return res.status(404).json({ error: \"User not found\" });\r\n+  if (!user) {\r\n+    console.log(\"User not found for ID:\", req.userId);\r\n+    return res.status(404).json({ error: \"User not found\" });\r\n+  }\r\n   res.json({ user });\r\n });\r\n \r\n const PORT = process.env.PORT || 5000;\r\n"
                },
                {
                    "date": 1751366153194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,15 +88,11 @@\n   }\r\n };\r\n \r\n // Profile route (protected)\r\n-app.get('/api/profile', auth, async (req, res) => {\r\n-  console.log(\"Looking up user ID:\", req.userId);\r\n-  const user = await User.findById(req.userId).select('-password');\r\n-  if (!user) {\r\n-    console.log(\"User not found for ID:\", req.userId);\r\n-    return res.status(404).json({ error: \"User not found\" });\r\n-  }\r\n+app.get('/api/test-user/:id', async (req, res) => {\r\n+  const user = await User.findById(req.params.id).select('-password');\r\n+  if (!user) return res.status(404).json({ error: \"User not found\" });\r\n   res.json({ user });\r\n });\r\n \r\n const PORT = process.env.PORT || 5000;\r\n"
                },
                {
                    "date": 1751366288369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,15 @@\n   }\r\n };\r\n \r\n // Profile route (protected)\r\n+app.get('/api/profile', auth, async (req, res) => {\r\n+  const user = await User.findById(req.userId).select('-password');\r\n+  if (!user) return res.status(404).json({ error: \"User not found\" });\r\n+  res.json({ user });\r\n+});\r\n+\r\n+// (Optional) Test route for manual user lookup\r\n app.get('/api/test-user/:id', async (req, res) => {\r\n   const user = await User.findById(req.params.id).select('-password');\r\n   if (!user) return res.status(404).json({ error: \"User not found\" });\r\n   res.json({ user });\r\n"
                },
                {
                    "date": 1751367092534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,7 +100,5 @@\n   const user = await User.findById(req.params.id).select('-password');\r\n   if (!user) return res.status(404).json({ error: \"User not found\" });\r\n   res.json({ user });\r\n });\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n\\ No newline at end of file\n+module.exports = app;\r\n"
                },
                {
                    "date": 1751367180508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,10 @@\n const app = express();\r\n app.use(cors());\r\n app.use(express.json());\r\n \r\n-// MongoDB connection\r\n mongoose.connect(process.env.MONGO_URI);\r\n \r\n-// User schema\r\n const userSchema = new mongoose.Schema({\r\n   username: { type: String, unique: true },\r\n   password: String,\r\n   dob: String,\r\n@@ -100,5 +98,6 @@\n   const user = await User.findById(req.params.id).select('-password');\r\n   if (!user) return res.status(404).json({ error: \"User not found\" });\r\n   res.json({ user });\r\n });\r\n+\r\n module.exports = app;\r\n"
                },
                {
                    "date": 1751367186854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n });\r\n \r\n const User = mongoose.model('User', userSchema);\r\n \r\n-// Register route\r\n app.post('/api/register', async (req, res) => {\r\n   try {\r\n     const { username, password, dob, firstName, lastName, email, phone } = req.body;\r\n     if (!username || !password || !dob || !firstName || !lastName || !email || !phone) {\r\n@@ -50,9 +49,8 @@\n     res.status(400).json({ error: err.message });\r\n   }\r\n });\r\n \r\n-// Login route\r\n app.post('/api/login', async (req, res) => {\r\n   try {\r\n     const { username, password } = req.body;\r\n     if (!username || !password)\r\n@@ -63,9 +61,8 @@\n \r\n     const isMatch = await bcrypt.compare(password, user.password);\r\n     if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n \r\n-    // Generate JWT token\r\n     const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n     res.json({ token, user: { username: user.username, email: user.email } });\r\n   } catch (err) {\r\n     res.status(500).json({ error: 'Server error' });\r\n"
                }
            ],
            "date": 1751362656160,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// MongoDB connection\r\nmongoose.connect('mongodb://localhost:27017/piggierich', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\n\r\n// User schema\r\nconst userSchema = new mongoose.Schema({\r\n  username: { type: String, unique: true },\r\n  password: String,\r\n  dob: String,\r\n  firstName: String,\r\n  lastName: String,\r\n  email: { type: String, unique: true },\r\n  phone: String,\r\n});\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\n// Register route\r\napp.post('/api/register', async (req, res) => {\r\n  try {\r\n    const { username, password, dob, firstName, lastName, email, phone } = req.body;\r\n    if (!username || !password || !dob || !firstName || !lastName || !email || !phone) {\r\n      return res.status(400).json({ error: 'All fields are required.' });\r\n    }\r\n    const existingUser = await User.findOne({ $or: [{ username }, { email }] });\r\n    if (existingUser) {\r\n      return res.status(400).json({ error: 'Username or email already exists.' });\r\n    }\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const user = new User({\r\n      username,\r\n      password: hashedPassword,\r\n      dob,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n    });\r\n    await user.save();\r\n    res.status(201).json({ message: 'User registered successfully.' });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n});\r\n\r\n// Login route\r\napp.post('/api/login', async (req, res) => {\r\n  try {\r\n    const { username, password } = req.body;\r\n    if (!username || !password)\r\n      return res.status(400).json({ error: 'Username and password required.' });\r\n\r\n    const user = await User.findOne({ username });\r\n    if (!user) return res.status(400).json({ error: 'Invalid credentials' });\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign({ userId: user._id }, 'your_jwt_secret', { expiresIn: '1d' });\r\n    res.json({ token, user: { username: user.username, email: user.email } });\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));"
        }
    ]
}